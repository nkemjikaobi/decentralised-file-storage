import type { NextPage } from 'next';
import Head from 'next/head';
import { useState } from 'react';
import FileList from '../components/FileList';
import ShareModal from '../components/modals/ShareModal';
import UploadFileModal from '../components/modals/UploadFileModal';
import toast, { Toaster } from 'react-hot-toast';
import WalletContext from 'context/wallet/WalletContext';
import { useContext, useEffect } from 'react';
import { useRouter } from 'next/router';

const Dashboard: NextPage = () => {
	const [uploadFileModal, setUploadFileModal] = useState<boolean>(false);
	const [shareModal, setShareModal] = useState<boolean>(false);
	const [counter, setCounter] = useState<number>(0);
	const [allFiles, setAllFiles] = useState<any>([]);
	const [myLibrary, setMyLibrary] = useState<any>([]);
	const [shared, setShared] = useState<any>([]);
	const [isAllFiles, setIsAllFiles] = useState<boolean>(true);
	const walletContext = useContext(WalletContext);

	const {
		disconnectWallet,
		web3Modal,
		message,
		error,
		clearMessage,
		clearError,
		address,
		connectWallet,
		fetchFiles,
		contract,
		files,
		sharedFiles,
	} = walletContext;
	const router = useRouter();

	const reconnectWallet = async () => {
		await connectWallet(router);
	};

	//Reconnect wallet on page refresh
	useEffect(() => {
		let mounted = true;

		if (mounted && localStorage?.getItem('isWalletConnected') === 'true') {
			reconnectWallet();
		}
		return () => {
			mounted = false;
		};
		//eslint-disable-next-line
	}, []);

	//Fetch files
	useEffect(() => {
		let mounted = true;
		if (mounted && address !== null && contract !== null && counter === 0) {
			fetchFiles(contract);
			setCounter(3);
		}
		return () => {
			mounted = false;
		};
		//eslint-disable-next-line
	}, [address, contract]);

	//Handle Messages
	useEffect(() => {
		let mounted = true;

		if (mounted && message !== null) {
			toast.success(message);
			setTimeout(() => clearMessage(), 3000);
		}
		return () => {
			mounted = false;
		};
		//eslint-disable-next-line
	}, [message]);

	//Handle Errors
	useEffect(() => {
		let mounted = true;

		if (mounted && error !== null) {
			toast.error(error);
			setTimeout(() => clearError(), 3000);
		}
		return () => {
			mounted = false;
		};
		//eslint-disable-next-line
	}, [error]);

	//Filtered files
	useEffect(() => {
		let mounted = true;

		if (mounted && files.length > 0) {
			const filteredFiles =
				files && files.filter((file: any) => file.isPrivate === false);
			setAllFiles(filteredFiles);
		}
		return () => {
			mounted = false;
		};
		//eslint-disable-next-line
	}, [files]);

	const handleAllFiles = () => {
		setIsAllFiles(true);
		const filteredFiles =
			files && files.filter((file: any) => file.isPrivate === false);
		setAllFiles(filteredFiles);
	};

	const handleMyLibrary = () => {
		setIsAllFiles(false);
		const filteredFiles =
			files && files.filter((file: any) => file.isPrivate === true);
		setMyLibrary(filteredFiles);
		const shared = files && files.filter((file: any) => file.sharedWith.includes(address));
		setShared(shared);
	};

	return (
		<div>
			<Head>
				<title>Dashboard</title>
				<meta name='description' content='Generated by create next app' />
				<link rel='icon' href='/favicon.ico' />
			</Head>
			<Toaster position='top-right' />

			<main className='container mt-4 '>
				<div
					className={`${uploadFileModal && 'blur-lg'} ${
						shareModal && 'blur-lg'
					}`}
				>
					<nav className='flex justify-between items-center'>
						<h2
							className='text-4xl font-bold text-center cursor-pointer'
							onClick={() => router.push('/')}
						>
							Dinata
						</h2>
						<button
							className='flex justify-center items-center mt-10 bg-sky-500 w-48 px-5 py-3 text-base rounded-lg hover:bg-sky-900'
							onClick={() => disconnectWallet(web3Modal, router)}
						>
							Logout
						</button>
					</nav>
					<section className='mt-8'>
						<h4 className='text-base mb-4'>
							Welcome user,{' '}
							<span className='text-2xl text-purple-600'>{address}</span>
						</h4>
						<hr />
						<div className='mt-16 flex justify-center items-center'>
							<button
								className={`flex mr-4 justify-center items-center mt-10 ${
									isAllFiles ? 'bg-sky-500' : 'border-sky-500 border'
								}  w-48 px-5 py-3 text-base rounded-lg`}
								onClick={() => handleAllFiles()}
							>
								All Files
							</button>
							<button
								className={`flex justify-center items-center mt-10 ${
									isAllFiles ? 'border-sky-500 border' : ' bg-sky-500'
								} w-48 px-5 py-3 text-base rounded-lg`}
								onClick={() => handleMyLibrary()}
							>
								My Library
							</button>
						</div>
						{isAllFiles && (
							<FileList
								title='All Files'
								data={allFiles}
								setUploadFileModal={setUploadFileModal}
								setShareModal={setShareModal}
								isAllFiles={isAllFiles}
							/>
						)}
						{!isAllFiles && (
							<FileList
								title='My Files'
								setUploadFileModal={setUploadFileModal}
								setShareModal={setShareModal}
								isAllFiles={isAllFiles}
								data={myLibrary}
							/>
						)}
						{!isAllFiles && (
							<FileList
								title='Shared with me'
								setUploadFileModal={setUploadFileModal}
								setShareModal={setShareModal}
								isAllFiles={isAllFiles}
								data={shared}
								hasUpload={false}
							/>
						)}
						{/* <FileList
							title='Shared with me'
							hasUpload={false}
							data={sharedFiles}
						/>  */}
					</section>
				</div>
				{uploadFileModal && (
					<div className='absolute top-1/4 left-1/4 ml-64'>
						<UploadFileModal setUploadFileModal={setUploadFileModal} />
					</div>
				)}
				{shareModal && (
					<div className='absolute top-1/4 left-1/4 ml-64'>
						<ShareModal setShareModal={setShareModal} />
					</div>
				)}
			</main>
		</div>
	);
};

export default Dashboard;
